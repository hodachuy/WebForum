@using MvcForum.Core.ExtensionMethods
@using MvcForum.Web.Application.ExtensionMethods
@using MvcForum.Web.ViewModels.Post
@using System.Globalization
@model PostViewModel
@{
    var postId = Model.Post.Id;
    var loggedOnUserId = Html.CurrentMember() != null ? Html.CurrentMember().Id : Guid.Empty;
    var isAdmin = User.IsInRole(Constants.AdminRoleName);
    var downVotes = Model.Votes.Where(x => x.Amount < 0).ToList();
    var upVotes = Model.Votes.Where(x => x.Amount > 0).ToList();
}
<div class="row post solution-@Model.Post.IsSolution.ToString().ToLower() post-@postId" data-id="@postId">
    <div class="col-md-2 hidden-xs rowcreater-post">
        <a href="@Model.Post.User.NiceUrl">
            <img src="@Model.Post.User.MemberImage(ForumConfiguration.Instance.GravatarPostSize)" alt="@Model.Post.User.UserName">
        </a>
        @if (Model.Post.User.Roles.Any(x => x.RoleName.Contains(Constants.AdminRoleName)))
        {
            <span class="label label-default">
                @Html.Lang("Admin")
            </span>
        }
        @if (Model.IsTrustedUser)
        {
            <span class="label label-success">
                @Html.Lang("Post.IsTrustedUser")
            </span>
        }
        @if (Model.MemberIsOnline)
        {
            <span class="label label-success">
                @Html.Lang("Post.MemberIsOnline")
            </span>
        }
        <p class="font-size-11 m-y-5">
            Tham gia: @Model.Post.User.CreateDate.ToLocalTime().ToString("dd-MM-yy")
        </p>
        <p class="font-size-11 m-y-5">
            Bài viết: @Model.Post.User.TotalPosts
        </p>
    </div>
    <div class="col-md-10 clearfix rowdetail-post">
        <div class="postdetails@(Html.CurrentMember() == null ? " postdetails-guest" : "")">
            <div class="row postbodytop">
                <div class="col-md-10 col-xs-10 pd-unset">
                    @if (Model.Post.InReplyTo == null && Model.Post.IsTopicStarter == false)
                    {
                        <!--Show Topic Name-->
                        <p class="text-muted m-y-3">Re: <a class="text-muted" href="@Model.ParentTopic.NiceUrl">@Model.ParentTopic.Name</a></p>
                    }
                    <a class="postmember-@postId" href="@Html.Raw(Model.Post.User.NiceUrl)">@Html.Raw(Model.Post.User.UserName)</a>
                    @Html.LanguageString("Post.PostedThis")
                    @DatesUi.GetPrettyDate(Model.Post.DateCreated.ToLocalTime().ToString()), @Model.Post.DateCreated.ToLocalTime().ToString("dd-MM-yyyy, hh:mm tt", CultureInfo.InvariantCulture)
                    @if (isAdmin && !string.IsNullOrEmpty(Model.Post.IpAddress))
                    {
                <text> - @Model.Post.IpAddress</text>}
                    <span class="hidden-xs">
                        @if (Html.Settings().DisplayEditedBy && Model.Post.DateEdited > Model.Post.DateCreated)
                        {
                            if (Model.Permissions[ForumConfiguration.Instance.PermissionEditPosts].IsTicked)
                            {
                <text> - <a href="@Url.Action("GetPostEditHistory", "Post", new {id = Model.Post.Id})" class="showpostedithistory" data-name="@Html.Lang("PostEdit.Panel.Name")">@Html.LanguageString("Post.LastEdited")  @DatesUi.GetPrettyDate(Model.Post.DateEdited.ToString())</a></text> }
                                else
                                {
                <text> - @Html.LanguageString("Post.LastEdited")  @DatesUi.GetPrettyDate(Model.Post.DateEdited.ToString())</text>}
                            }
                    </span>
                </div>
                <div class="col-md-2 col-xs-2 pd-unset">
                    @if (Model.Idx != 0)
                    {
                        <a class="permalink float-r text-muted" href="@Html.Raw(Model.PermaLink)">
                            #@Model.Idx
                        </a>
                    }
                    <a class="post-reply-quote float-r" href="?quote=@Model.Post.Id#createpost" title="@Html.LanguageString("Post.Quote")">
                        <i class="icon fa fa-quote-left" aria-hidden="true"></i>
                        <span class="sr-only">Quote</span>
                    </a>
                </div>              
            </div>

            <div class="row postcontent" id="postcontent-@postId">
                <p>@Html.Raw(Model.Post.PostContent.ConvertPostContent())</p>

                @if (Html.Settings().EnableSignatures && !string.IsNullOrEmpty(Model.Post.User.Signature))
                {
                    <div class="userpostsignature">@Html.Raw(Model.Post.User.Signature.ConvertPostContent())</div>
                }
            </div>

            @if (!Model.MinimalPost)
            {
                <div class="row">
                    <div class="col-md-10 col-xs-10 postsocial pd-unset">
                        <ul>
                        <li>
                            <span class="glyphicon glyphicon-thumbs-up" aria-hidden="true"></span>
                            @if (Html.Settings().EnablePoints)
                            {
                                <span class="count">@upVotes.Count.KiloFormat()</span>
                            }
                            @if (Model.AllowedToVote)
                            {
                                <a class="votelink" data-id="@postId" data-votetype="up" data-votetext="@Html.LanguageString("Post.VoteUp")" data-votedtext="@Html.LanguageString("Post.VotedUp")" data-hasvoted="@Model.HasVotedUp.ToString().ToLower()" style="@Html.Raw(Model.HasVotedDown ? "display:none;" : "")">
                                    @(Model.HasVotedUp ? Html.LanguageString("Post.VotedUp") : Html.LanguageString("Post.VoteUp"))
                                </a>
                            }
                        </li>

                        @if (!Html.Settings().DisableDislikeButton)
                        {
                            <li>
                                <span class="glyphicon glyphicon-thumbs-down" aria-hidden="true"></span>
                                @if (Html.Settings().EnablePoints)
                                {
                                    <span class="count">@downVotes.Count.KiloFormat()</span>
                                }
                                @if (Model.AllowedToVote)
                                {
                                    <a class="votelink" data-id="@postId" data-votetype="down" data-votetext="@Html.LanguageString("Post.VoteDown")" data-votedtext="@Html.LanguageString("Post.VotedDown")" data-hasvoted="@Model.HasVotedDown.ToString().ToLower()" style="@Html.Raw(Model.HasVotedUp ? "display:none;" : "")">
                                        @(Model.HasVotedDown ? Html.LanguageString("Post.VotedDown") : Html.LanguageString("Post.VoteDown"))
                                    </a>
                                }
                            </li>
                        }
                        <li>
                            <span class="glyphicon @(Model.MemberHasFavourited ? "glyphicon glyphicon-star" : "glyphicon-star-empty")" aria-hidden="true"></span>
                            <span class="count">@Model.Favourites.Count</span>
                            @if (Html.CurrentMember() != null && Model.Post.User.Id != loggedOnUserId)
                            {
                                <a class="favourite" data-id="@postId" data-addremove="@(Model.MemberHasFavourited ? "remove" : "add")">
                                    @(Model.MemberHasFavourited ? Html.Lang("Post.Favourited") : Html.Lang("Post.Favourite"))
                                </a>
                            }
                        </li>

                        @if (Html.Settings().EnableMarkAsSolution)
                        {
                            if (Model.ParentTopic.Solved && Model.Post.IsSolution)
                            {
                                <li>
                                    <span class="glyphicon glyphicon-ok green-colour" aria-hidden="true"></span>
                                </li>
                            }
                            else if (!Model.ParentTopic.Solved && !Model.Post.IsTopicStarter && Html.CurrentMember() != null && (Model.ParentTopic.User.Id == loggedOnUserId || User.IsInRole(Constants.AdminRoleName)))
                            {
                                <li>
                                    <span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span>
                                    <a class="solutionlink" data-id="@postId">
                                        @Html.LanguageString("Post.IsSolution")
                                    </a>
                                </li>
                            }
                        }

                        @if (Html.CurrentMember() != null && Model.Post.User.Id != loggedOnUserId && !Model.Post.IsTopicStarter)
                        {
                            <li>
                                <i class="fa fa-reply"></i>
                                <a class="replytolink" href="?reply=@Model.Post.Id#createpost">
                                    @Html.LanguageString("Post.Reply")
                                </a>
                            </li>
                        }
                    </ul>
                    </div>
                    @if (Html.CurrentMember() != null && !Model.MinimalPost)
                    {
                       <div class="col-md-2 col-xs-2 posttool pd-unset">
                        <div class="dropdown text-right">
                            <a href="#" class="dropdown-toggle text-muted" role="button" aria-haspopup="true" aria-expanded="false" data-toggle="dropdown" id="tool-post" title="Tiện ích">
                                <span class="glyphicon glyphicon-option-horizontal"></span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="tool-post" style="min-width:30px;">
                                @if (Model.Post.User.Id != loggedOnUserId && loggedOnUserId != Guid.Empty && Html.Settings().EnableSpamReporting)
                                {
                                    <li>
                                        <a class="btn-mvc btn-mvc-small btn-mvc-fullwidth" href="@Url.Action("Report", "Post", new { id = Model.Post.Id })" title="@Html.LanguageString("Post.Report")">
                                            @*@Html.LanguageString("Post.Report")*@
                                            <i class="glyphicon glyphicon glyphicon-exclamation-sign"></i>
                                        </a>
                                    </li>
                                }
                                @if (Model.Post.User.Id == loggedOnUserId || Model.Permissions[ForumConfiguration.Instance.PermissionDeletePosts].IsTicked)
                                {
                                    <li>
                                            @using (Html.BeginForm("DeletePost", "Post", FormMethod.Post, new {@class = "form-login"}))
                                            {
                                                <button class="btn-mvc btn-mvc-small btn-mvc-fullwidth" onclick="return confirm('@(Html.LanguageString("Post.DeleteConfirmation"))')" type="submit" title="@Html.LanguageString("Post.Delete")">
                                                    @*@Html.LanguageString("Post.Delete")*@
                                                    <i class="glyphicon glyphicon-remove-circle"></i>
                                                </button>
                                                @Html.Hidden("id", Model.Post.Id)
                                            }
                                        @*<a class="btn-mvc btn-mvc-small btn-mvc-fullwidth" onclick="return confirm('@(Html.LanguageString("Post.DeleteConfirmation"))')" href="@Url.Action("DeletePost", "Post", new {id = Model.Post.Id})">
                                            @Html.LanguageString("Post.Delete")
                                        </a>*@
                                    </li>
                                }

                                @if (Model.Post.User.Id == loggedOnUserId || Model.Permissions[ForumConfiguration.Instance.PermissionEditPosts].IsTicked)
                                {
                                    <li>
                                        <a class="btn-mvc btn-mvc-small btn-mvc-fullwidth" href="@Url.Action("EditPostTopic", "Topic", new { id = Model.Post.Id })" title="@Html.LanguageString("Post.Edit")">
                                            @*@Html.LanguageString("Post.Edit")*@
                                            <i class="glyphicon glyphicon-edit"></i>
                                        </a>
                                    </li>
                                }

                                @if (!Model.Post.IsTopicStarter && Model.Permissions[ForumConfiguration.Instance.PermissionEditPosts].IsTicked)
                                {
                                    <li>
                                        <a class="btn-mvc btn-mvc-small btn-mvc-fullwidth" href="@Url.Action("MovePost", "Post", new { id = Model.Post.Id })" title="@Html.LanguageString("Post.Move")">
                                            @*@Html.LanguageString("Post.Move")*@
                                            <i class="glyphicon glyphicon-move"></i>
                                        </a>
                                    </li>
                                }

                                @if ((Model.Post.User.Id == loggedOnUserId && Model.Post.User.DisableFileUploads != true || User.IsInRole(Constants.AdminRoleName)) && Model.Permissions[ForumConfiguration.Instance.PermissionAttachFiles].IsTicked)
                                {
                                    <li>
                                        <a class="btn-mvc btn-mvc-small btn-mvc-fullwidth postshowattach" href="#" title="@Html.LanguageString("Post.Attach")">
                                            @*@Html.LanguageString("Post.Attach")*@
                                            <i class="glyphicon glyphicon-floppy-open"></i>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                     </div>
                    }
                </div>
            }

            @if (Model.Post.IsTopicStarter && Model.ParentTopic.Tags.Any())
            {
                <div class="posttags tagsinput">
                    @foreach (var tag in Model.ParentTopic.Tags)
                    {
                        <span class="tag"><span><a href="@Html.Raw(tag.NiceUrl)">@Html.Raw(tag.Tag)</a></span></span>
                    }
                </div>
            }

            @if (Model.Post.Files != null && Model.Post.Files.Any())
            {

                <div class="postuploadedfilesholder clearfix">
                    <p>@Html.Lang("Post.AttachedFiles")</p>
                    <ul>
                        @foreach (var file in Model.Post.Files.OrderByDescending(o => o.DateCreated))
                        {
                            <li>
                                <a class="fileupload" href="@Url.Action("Download", "File", new { id = file.Id})" title="@file.Filename">
                                    @if (AppHelpers.FileIsImage(file.FilePath))
                                    {
                                        <span class="glyphicon glyphicon-picture" aria-hidden="true"></span>
                                    }
                                    else
                                    {
                                        <span class="glyphicon glyphicon-file" aria-hidden="true"></span>
                                    }
                                </a>
                                @if (Model.Post.User.Id == loggedOnUserId || User.IsInRole(Constants.AdminRoleName))
                                {
                                    <a href="@Url.Action("DeleteUploadedFile", "Upload", new { file.Id })" class="deleteupload" title="@Html.LanguageString("Post.Delete")">
                                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                    </a>
                                }
                            </li>
                        }
                    </ul>
                </div>
            }

            @if (Model.Permissions[ForumConfiguration.Instance.PermissionAttachFiles].IsTicked && Model.Post.User.DisableFileUploads != true)
            {
                <div class="postuploadholder">
                    @using (Html.BeginForm("UploadPostFiles", "Upload", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        <div class="input-group input-group-sm">

                            <span class="input-group-btn">
                                <span class="btn btn-default btn-file">
                                    @Html.LanguageString("Post.Browse") <input type="file" name="files" id="files" value="" multiple="multiple">
                                </span>
                            </span>
                            <input type="text" class="form-control" readonly="">
                        </div>
                        <p>
                            <input type="submit" value="@Html.LanguageString("Post.Upload")" class="btn-mvc btn-mvc-small postuploadbutton" />
                            <span style="display: none;" class="ajaxspinner" title="@Html.LanguageString("Post.PleaseWait")">@Html.LanguageString("Post.PleaseWait")</span>
                            <input type="hidden" name="uploadPostId" id="uploadPostId" value="@Model.Post.Id" />
                        </p>
                    }
                </div>
            }

            @Html.Partial("_PostLikedBy", new PostLikedByViewModel { Post = Model.Post, Votes = upVotes })

        </div>
    </div>
</div>